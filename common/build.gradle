import com.elikill58.negativity.build.InstrumentClassesTask
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.github.johnrengelman.shadow'
}

sourceSets {
    main {
        java.srcDirs = ['src']
        resources.srcDirs = ['resources']
    }
    test {
        java.srcDirs = ['testSrc']
        resources.srcDirs = ['testResources']
    }
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")
}

processResources {
    def props = [version: version]
    inputs.properties(props)
    // Do not try to expand service files, they may contain a dollar sign to mark inner classes
    filesNotMatching(['META-INF/services/*', 'assets/negativity/*.properties']) {
        expand(props)
    }
}

shadowJar {
    archiveBaseName.set('negativity')
    archiveAppendix.set('common')
    archiveClassifier.set(null)

    mergeServiceFiles()
    from(
            project('integrations:advancedban').jar.outputs.files,
            project('integrations:dkbans').jar.outputs.files,
            project('integrations:litebans').jar.outputs.files,
            project('integrations:viaversion').jar.outputs.files
    )
}

build.dependsOn shadowJar

parent.tasks.named('shadowJar', ShadowJar) {
    it.from(shadowJar.outputs)
}

test {
    useJUnitPlatform()
}

InstrumentClassesTask.setupInstrumentation(project, sourceSets.main)

//task instrumentMainClasses(type: InstrumentClassesTask) {
//    SourceSet sourceSet = sourceSets.main
//    dependsOn(sourceSet.classesTaskName)
//    def classesDirs = sourceSet.output.classesDirs.files
//    inputClassesDirs.setFrom(classesDirs)
//    def instrumentedOutputDir = new File(classesDirs.first().parentFile, 'main-instrumented')
//    outputDir.convention(project.layout.projectDirectory.dir(instrumentedOutputDir.path))
//}
//
//task postInstrumentMainClasses {
//    dependsOn(instrumentMainClasses)
//    SourceSet sourceSet = sourceSets.main
//    DirectoryProperty instrumentationOutput = instrumentMainClasses.outputDir
//    ConfigurableFileCollection classesDirs = sourceSet.output.classesDirs as ConfigurableFileCollection
//    doLast { classesDirs.setFrom(instrumentationOutput) }
//}
//
//sourceSets.main.compiledBy postInstrumentMainClasses
