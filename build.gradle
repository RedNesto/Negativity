plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
}

repositories {
    jcenter()
    // For spigot and bungeecord
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'dmulloy2' // ProtocolLib
        url = 'http://repo.dmulloy2.net/nexus/repository/public/'
    }
    maven {
        name = 'sk89q' // Worldguard
        url = 'https://maven.enginehub.org/repo/'
    }
    // For sponge
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'spongepowered'
        url = 'https://repo.spongepowered.org/'
    }
    // For velocity
    maven {
        name = 'velocity'
        url = 'https://repo.velocitypowered.com/snapshots/'
    }
}

configurations {
    fatJar
}

dependencies {
    compile project(path: 'bungeecord', configuration: 'shadow')
    compile project(path: 'sponge', configuration: 'shadow')
    compile project(path: 'spigot', configuration: 'shadow')
    compile project(path: 'velocity', configuration: 'shadow')
}

build.dependsOn shadowJar

shadowJar {
    classifier = null
}

task('sourcesJar', type: Jar) {
    dependsOn 'classes'
    classifier = 'sources'
    from sourceSets['main'].allSource
    subprojects { proj -> proj.afterEvaluate {from proj.sourceSets['main'].allSource } }
}

def eliappNexusPublishing(RepositoryHandler repoHandler) {
    repoHandler.maven {
        name = 'eliapp'
        credentials(PasswordCredentials) {
            username project.hasProperty('eliappUsername') ? project.eliappUsername : ''
            password project.hasProperty('eliappPassword') ? project.eliappPassword : ''
        }
        if (project.version.endsWith("-SNAPSHOT")) {
            url = 'http://eliapp.fr:8081/repository/maven-snapshots/'
        } else {
            url = 'http://eliapp.fr:8081/repository/maven-releases/'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'negativity'
            version = version

            // Acts like a meta-artifact, bringing all other modules transiently
            from components.java
        }
    }
    repositories {
        eliappNexusPublishing(it)
    }
}

subprojects { proj ->
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    proj.afterEvaluate {
        // Allow to set a custom plugin output directory
        def pluginDir = System.getProperty('pluginDir')
        if (pluginDir != null) {
            def shadowJar = proj.tasks.findByName('shadowJar')
            if (shadowJar != null) {
                shadowJar.destinationDir(rootProject.file(pluginDir))
                shadowJar.archiveName('Negativity.jar')
            }
        }

        task('sourcesJar', type: Jar) {
            dependsOn 'classes'
            classifier = 'sources'
            from sourceSets['main'].allSource
        }

        task('javadocJar', type: Jar) {
            dependsOn javadoc
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = group
                    artifactId = project.ext.get('publishedArtifactId')
                    version = version

                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
            repositories {
                eliappNexusPublishing(it)
            }
        }
    }
}
