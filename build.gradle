plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
}

group = 'com.elikill58'

repositories {
    jcenter()
    // For spigot and bungeecord
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'dmulloy2' // ProtocolLib
        url = 'http://repo.dmulloy2.net/nexus/repository/public/'
    }
    maven {
        name = 'sk89q' // Worldguard
        url = 'https://maven.enginehub.org/repo/'
    }
    // For sponge
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'spongepowered'
        url = 'https://repo.spongepowered.org/'
    }
    // For velocity
    maven {
        name = 'velocity'
        url = 'https://repo.velocitypowered.com/snapshots/'
    }
}

configurations {
    fatJar
}

dependencies {
    compile project(path: 'bungeecord', configuration: 'shadow')
    compile project(path: 'sponge', configuration: 'shadow')
    compile project(path: 'spigot', configuration: 'shadow')
    compile project(path: 'velocity', configuration: 'shadow')
}

build.dependsOn shadowJar

shadowJar {
    classifier = null
}

task('sourcesJar', type: Jar) {
    dependsOn 'classes'
    classifier = 'sources'
    from sourceSets['main'].allSource
    subprojects { proj -> proj.afterEvaluate {from proj.sourceSets['main'].allSource } }
}

task('aggregatedJavadocs', type: Javadoc) {
    destinationDir = file("$buildDir/docs/javadoc")
    subprojects.each { proj ->
        proj.afterEvaluate {
            proj.tasks.withType(Javadoc).each { javadocTask ->
                source += javadocTask.source
                classpath += javadocTask.classpath
                excludes += javadocTask.excludes
                includes += javadocTask.includes
            }
        }
    }
}

task('javadocJar', type: Jar) {
    dependsOn aggregatedJavadocs
    classifier = 'javadoc'
    from aggregatedJavadocs.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'negativity'
            version = version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
